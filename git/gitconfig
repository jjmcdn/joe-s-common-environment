[core]
   excludesfile = HOMEDIR/.gitignore
   editor = gvim --nofork
   signingkey = SIGNKEY
[user]
   name = NAME
   email = EMAIL
[giggle]
   compact-mode = false
   main-window-maximized = true
   main-window-geometry = 0x0+0+0
[diff]
   renamelimit = 0
[help]
   autocorrect = 1
[sendemail]
   suppresscc = all
[imap]
   folder = "[Gmail]/Drafts"
   host = imaps://imap.gmail.com
   user = GMAIL_USERNAME
   pass = GMAIL_PASSWORD
   port = 993
   sslverify = false
[color]
   ui = auto
[alias]
   br = "!f() { git branch $* | grep -C2 '^[^ ] .*$' ; }; f"
   ls = ls-files --exclude-standard
   who = shortlog -s --
   lc = log ORIG_HEAD.. --stat --no-merges
   llog = log --date=local
   intercommit = "!f() { tmdir=$(mktemp -d) ; git show $1 > $tmpdir/commit1; git show $2 > $tmpdir/commit2; interdiff $tmpdir/commit[12] | less -FRS ; rm -fr $tmpdir; }; f"
   edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; gvim `f`"
   add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
   send-gmail = "!f() { git format-patch --cover-letter --signoff --stdout --thread origin/master | git imap-send ; }; f"
   # Create a throw-away branch.  The format is:
   # git scratch <tracking> <prefix>
   scratch = "!f() { git checkout -b $2_scratch_$(date +%Y_%m_%d) $1 ; }; f"
   # This is supposed to show us where two trees diverge, but it's never quite
   # worked right.  Should come back to it and figure out what's busted.
   diverges = !bash -c 'git rev-parse $(diff <(git log --pretty=oneline ${1}) <(git log --pretty=oneline ${2}) | tail -1 | cut -c 3-42)^'
   # Show only local branches
   lb = "!f() { exclude_list=$(mktemp) ; git branch -r | awk -F/ '{ print $2 }'>>$exclude_list ; git branch | grep -v -w -f $exclude_list ; rm $exclude_list ; }; f"
   # Turn all the local-only branches into a single line separated by spaces
   # (originally commas, hence the name) suitable for scripting or simple
   # reports.
   lbcsv = "!f() { git lb | tr '\\012' ' ' | tr -s ' ' ; }; f"
   # Show simple report of what is where
   df = "!f() { echo \"In $1 not in $2:\"; git rev-list --abbrev=10 --oneline $2..$1; echo \"\nMissing from $1 in $2:\"; git rev-list --abbrev=10 --oneline $1..$2; }; f"
   # Simple way to paste a pull request onto a command line and then get the
   # rev-list comparison between what you fetched and where you are now.
   fe = "!f() { git fetch $1 $2:$3; echo ; git df $3 HEAD ; } ;f"
   # based on Jason's ofetch command in wrgit, I use this to manage my mix of
   # github and openembedded remotes.
   ofetch = "!f() { local repo=$(git config --get remote.$1.url) ; local head=$(cat .git/HEAD | sed -e 's#ref: refs/heads/##') ; local refspec=$(git config --get branch.$head.merge | sed -e 's#refs/heads/##') ; git fetch $2 $repo $refspec:refs/remotes/$1/$refspec ; } ; f"

# vim:set ft=gitconfig:
