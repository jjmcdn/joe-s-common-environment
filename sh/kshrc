# ========================================================================
# Originally developed on OpenBSD's version of ksh:
#
#  @(#)PD KSH v5.2.14 99/07/13.2
#
# but seems to work reasonably well on AT&T's ksh without any futzing
# around.

case $- in
   *i*) : # interactive
      # Only process .kshrc if this is an interactive session

      # Environment variables
      export SHELL=/bin/ksh
      export TTY=$(tty|cut -f3-4 -d/)
      export HISTFILE=$HOME/.sh_hist$(echo ${TTY} | tr -d '/')
      export PWD=$(pwd)

      # If we've set the color variables, be sure to set those in our prompts
      # below
      if [ -n "$PROMPT_FGC" ]
      then
         PROMPT_FG="tput setaf $PROMPT_FGC"
      fi
      if [ -n "$PROMPT_BGC" ]
      then
         PROMPT_BG="tput setab $PROMPT_BGC"
      fi

      # taken from: http://www.dotfiles.com/files/5/197_.kshrc {{{
      # set positional parameters to corresponding code values
      # (${27} = \033 = ESC)
      typeset -i _i=8#40
      while ((_i -= 1))
      do
         set -- "$(print -n \\0${_i#8?})" ${@+"$@"}
      done

      # set up cursor and function keys
      # alias keymap emacs keyboard          command
      # __D   \E[D   ^B    left arrow        move cursor left
      # __C   \E[C   ^F    right arrow       move cursor right
      # __A   \E[A   ^P    up arrow          previous history entry
      # __B   \E[B   ^N    down arrow        next     history entry
      # __5~  \E[5   M-b   prev              move cursor back    one word
      # __6~  \E[6   M-f   next              move cursor forward one word
      # __3~  \E[2         insert            repeat previous argument
      #       ^?     ^D    delete            delete current character
      # __H          ^A    home              move cursor to start of line

      #     up         down       right   left    prev             next
      alias __A=${16}  __B=${14}  __C=$6  __D=$2  __5=${27}b${29}  __6=${27}f${29}

      #     insert char                                          home
      alias __3="${27}b${27}f${27} ${27}${29} ${27}p${25}${29}"  __H=$1

      # setup prompt: underline/reverse (user/root), normal/bold (success/failure)
      if [[ $TERM = @(dtterm|ansi|*vt*|xterm|color_xterm|xterm-color|sun|AT386|screen|linux) ]]; then
         if [[ $(id) = uid=0[!0-9]* ]]; then
            #set -A _ps1 "${27}[?1l${27}[\${TERM[!\$?]+1;}7m${13}" "${27}[m"
            set -A _ps1 "$(tput rev setab 1)" "$(tput sgr0)"
         else
            #set -A _ps1 "${27}[?1l${27}[\${TERM[!\$?]+1;}4m${13}" "${27}[m"
            set -A _ps1 "$(tput smul)$(eval $PROMPT_FG)$(eval $PROMPT_BG)" "$(tput sgr0)"
         fi
      else
         if [[ $(id) = uid=0[!0-9]* ]]; then
            set -A _ps1 "" "\${TERM[!\$?]+!!}#"
         else
            set -A _ps1 "" "\${TERM[\$?]+$}\${TERM[!\$?]+!!}"
         fi
      fi
      _ps1[2]=$(uname -n)     # nodename
      _ps1[2]=${_ps1[2]%%.*}  # strip off domain
      # }}}
      
      # Directory manipulation functions from the book 'The Korn Shell' by
      # AT&T/Korn.
      # {{{
      #
      # Transcribed by Paul Vallee
      # The Pythian Group, Inc.
      # www.pythian.com / vallee@pythian.com
      #
      # Fixes to typos, odd ksh93/pdksh incompatibilities and more bash-like
      # directory stack manipulation behaviour by Joe MacDonald
      #
      # Either save this as a separate file and then . it, or paste this into
      # your .profile.  Then, use mcd. Try it, you'll like it.
      # 
      # jjmac: (2007.06.13)
      # - there were a pile of little changes I had to make in order to make
      # this work with pdksh, presumably we're finding implementation
      # differences and there's a good chance that if anything is going to
      # braek in ksh93, it'll be here.
      #
      # - also added in the mcd_sort, mcd_clean and mcd_pop functions.
      # mcd_pop still doesn't work properly but it's reasonably close now.
      # The problems I've observed are:
      #
      #  1) If you stack looks like this:
      #     yow-jmacdona-l1 ~ mcd
      #     1) ~            
      #     2) /tmp/blah/foo
      #     3) /tmp/blah    
      #     4) /tmp         
      #  and you pop /tmp, you get this:
      #     yow-jmacdona-l1 ~ mcd_pop /tmp
      #     yow-jmacdona-l1 ~ mcd
      #     1) ~
      #  which is not really the correct behaviour, but is at least
      #  reasonable.
      #
      #  2) If your stack looks like this:
      #     yow-jmacdona-l1 /tmp/blah mcd
      #     1) /tmp/blah    
      #     2) /tmp/blah/foo
      #     3) /tmp/blah/foo
      #     4) /tmp/blah    
      #     5) /tmp         
      #     6) ~            
      #  and you mcd_sort it, the top of the stack won't be squeezed out:
      #     yow-jmacdona-l1 /tmp/blah mcd_sort
      #     yow-jmacdona-l1 /tmp/blah mcd
      #     1) /tmp/blah    
      #     2) /tmp/blah/foo
      #     3) /tmp/blah    
      #     4) /tmp         
      #     5) ~            
      #  which is kind of annoying.
      # 
      integer  _push_max=${CDSTACK-32} _push_top=${CDSTACK-32}

      #unalias cd
      alias cd=_cd

      # Display directory stack -- $HOME display as ~
      function dirs
      {
         dir="${PWD#$HOME/}" 
         case $dir in
            $HOME) dir=\~ ;;
            /*) ;;
            *) dir=\~/$dir ;;
         esac

         PS3=
         select i in "$dir" "${_push_stack[@]}"
         do :
            done < /dev/null
      }

      # set our prompt to something not too ugly
      function _set_prompt
      {
          PS1=$PWD

          # replace $HOME by ~
          [[ $PS1 = $HOME* && $HOME != / ]] && PS1=\~${PS1#$HOME}

          # use at most half of command line length for prompt cwd path
          typeset COLUMNS=${COLUMNS:-$(tput cols >/dev/null 2>&1 && tput cols)}
          while ((${#_ps1[2]} + 1 + ${#PS1} + 1 > ${COLUMNS:-80} / 2)) && [[ ${PS1#*/} != $PS1 ]]
          do
             PS1=${PS1#*/}
          done

          PS1="${_ps1[0]}${_ps1[2]} $PS1${_ps1[1]} "
      }

      # Change directory and put directory on front of stack
      function _cd
      {
         typeset dir=
         integer n=0 type=4 
         case $1 in
            -|-1|2) # cd -
               n=_push_top type=1
               ;;
            -[1-9]|-[1-9][0-9]) # cd -n
               n=_push_top+${1#-}-1 type=2
               ;;
            1) # keep present directory
               print -r - "$PWD"
               _set_prompt
               return
               ;;
            [2-9]|[1-9][0-9]) # cd n
               n=_push_top+${1}-2 type=2
               ;;
            *)
               if ((_push_top <= 0))
               then
                  type=3 n=_push_max
               fi
               ;;
         esac

         if ((type<3))
         then
            if ((n >= _push_max))
            then
               print cd: Directory stack not that deep
               return 1
            else
               dir=${_push_stack[n]}
            fi
         fi

         case $dir in
            ~*) dir=$HOME${dir#\~} ;;
         esac

         # jjmac: (2005.10.17) do I need a _set_prompt here?
         \cd "${dir:-$@}" > /dev/null || return 1
         dir=${OLDPWD#$HOME/}
         case $dir in
            $HOME)      dir=\~ ;;
            /*)         ;;
            *)          dir=\~/$dir ;;
         esac

         case $type in
            1) # swap first two elements
               _push_stack[_push_top]=$dir ;;
            2|3) # put $dir on top and shift down by one until top
               integer i=_push_top

               for dir in "$dir" "${_push_stack[@]}"
               do
                  ((i > n)) && break
                  _push_stack[i]=$dir
                  i=i+1
               done
               ;;
            4) # push name
               _push_stack[_push_top=_push_top-1]=$dir
               ;;
         esac

         print -r - "$PWD"
         _set_prompt
      }  

      # Menu-driven change directory command
      function mcd
      {
         typeset dir="${PWD#$HOME/}"
         case $dir in 
            $HOME) dir=\~ ;;
            /*)	;;
            *)	dir=\~/$dir;;
         esac
         PS3='Select by number or enter a path: '
         select dir in "$dir" "${_push_stack[@]}"
         do if _cd $REPLY
            then
               return
            fi 
         done
      }
      _set_prompt

      # Regrettably, my mcd stack gets pretty polluted, so I'll want to clean
      # it up periodically.  This one does a dictionary-order sort, squeezing
      # out duplicate entries.  The only failing I've seen in it so far is that
      # the top of the stack is except from this duplicate-pruning operation,
      # but when I tried to fix that I couldn't force it to also keep CWD at
      # the top of the stack.  I considered the current behaviour less
      # confusing than the alternative, though both are annoying.
      function mcd_sort
      {
         _push_top=$_push_max
         for i in `set | grep _push_stack | awk -F= '{ print $2 }' | sort -du` 
         do
            _push_top=$_push_top-1
            _push_stack[$_push_top]=$i
         done
         # Now we remove any remaining chunks
         let _mcd_purge=$_push_top-1
         for i in `seq 0 $_mcd_purge`
         do
            unset _push_stack[$i]
         done
         unset _mcd_purge
      }

      # Doesn't quite do what I want, it breaks down when your directory stack
      # looks like this:
      #
      # _push_stack[26]=/usr/local/share/gxmms
      # _push_stack[27]=/usr/local/share/gnome-2.0/ui
      # _push_stack[28]=/usr/local/share/gnome-2.0
      # _push_stack[29]=/usr/local/share/fonts
      # _push_stack[30]=/usr/local/share
      # _push_stack[31]=/tmp
      #
      # and you try to remove /usr/local/share.  It'll actually clean out
      # everything with /usr/local/share in the path.  Shouldn't be hard to
      # fix, but it hasn't exceeded my pain tolerance yet.
      function mcd_pop
      {
         _push_top=$_push_max
         for i in `set | grep _push_stack | fgrep -v $1 | awk -F= '{ print $2 }' | sort -du` 
         do
            _push_top=$_push_top-1
            _push_stack[$_push_top]=$i
         done
         # Now we remove any remaining chunks
         let _mcd_purge=$_push_top-1
         for i in `seq 0 $_mcd_purge`
         do
            unset _push_stack[$i]
         done
         unset _mcd_purge
      }

      # This'll be slow.  Sometimes unbearably so when NFS directories are in
      # your stack, but them's the breaks.
      function mcd_clean
      {
         for i in `set | grep _push_stack | awk -F= '{ print $2 }' | sort -du` 
         do
            # need to do our test on ~-expanded, but our pop on the ~'d name
            expanded=$(echo $i | sed -e "s;~;$HOME;")
            if [ ! -d $expanded ]
            then
               mcd_pop $i
            fi
         done
      }

      set +o nolog

      # clean up
      shift 8#40-1
      unset _i
      # }}}

      # And this is where things get hairy.  I *like* vi-tabcomplete but not
      # all ksh implementations  have it.  No big deal except the way to
      # identify one ksh from another is kind of the opposite of 'standard',
      # so we have to try a few things.  The order of these tests are in no
      # way scientific, they're purely based on the order of frequency of the
      # ksh-variants I use.
      #
      # There are probably much better ways to do this.
      case "$KSH_VERSION" in
         *PD* )
            # PD KSH
            # Found on: OpenBSD and most of my Ubuntu boxes.
            set -o vi-tabcomplete
            ;;
         *93t* )
            # AT&T KSH93
            # Found on a Fedora Core box I use.
            set -o vi
            ;;
         * )
            # Probably AT&T KSH88
            # Found on a few SunOS 5.9 boxes I occasionally connect to.
            # How do we determine this with some level of accuracy?  Let's
            # check the $SECONDS variable:
            case "$SECONDS" in
               *\.* )
                  # Okay, this this is screwed up.  ksh93 has a decimal point
                  # in $SECONDS but every ksh93 I've seen also knows about
                  # KSH_VERSION.  For now I'll keep this check separate, but
                  # really I'm going to do the same thing for this wonky ksh93
                  # as I would for ksh88.
                  set -o vi
                  ;;
               * )
                  # ksh88.  Assume stupidity.
                  set -o vi
                  ;;
            esac
            ;;
      esac

      # That bell is really annoying
      stty imaxbel
      # }}}
      ;;
   *) : # non interactive
      # if I wanted something in .kshrc for non-interactive shells, it would go
      # here
      ;;
esac

# If we have a ksh functions file, source it.  If you don't, why the hell not?
if [ -f ${HOME}/.fns.ksh ]
then
   . ${HOME}/.fns.ksh
fi

# vim: tw=78 ts=3 sw=3 et nowrap ft=sh
